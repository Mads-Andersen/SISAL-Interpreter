package interpreter

import interpreter._
import parser._
import parser.Type._
import utility._
import partitioner._

object Runner {

  var parallel = true
  val fibonacci = Program(SISAL.compileFile("../Programs/fibonacci.sis"), List())
  val sqrt = Program(SISAL.compileFile("../Programs/SqrtLoopA.sis"), List())
  val squares = Program(SISAL.compileFile("../Programs/Squares.sis"), List(LInteger(5)))
  val factorial = Program(SISAL.compileFile("../Programs/Factorial.sis"), List())
  val parABCD = Program(SISAL.compileFile("../Programs/Par-ABCD.sis"), List())
  val seqABCD = Program(SISAL.compileFile("../Programs/Seq-ABCD.sis"), List())
  val test = Program(SISAL.compileFunction("function main(returns integer) 1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1+2+3+4+5+6+7+8+9+10-9-8-7-6-5-4-3-2-1"), List())
  //val GlobalGraphs = SISAL.compileFile("../Programs/GenerateProgram.sis")
  //val GlobalGraphs = SISAL.compileIF1File("../Programs/Loop23.if1")
  //val GlobalGraphs = SISAL.compileFunction("function main(returns boolean) 5 >= 5)")
  //val GlobalGraphs = SISAL.compileFunction("function main(returns integer) Max((25 + 5) - 5, 50)")
  //val GlobalGraphs = SISAL.compileFunction("function main(returns boolean) 5 >= 5)")
  //val GlobalGraphs = SISAL.compileFunction("function main(returns integer) 5")
  
  def main(args: Array[String]) {
    //Utility.time(InterpreterPar.eval(test), 20)
    Partitioner.partition(test)
  }
}