package partitioner

import parser._
import utility._
import parser.Type._


object TimeModel {
 
  // partitioned macro-actos
  def processors() = Runtime.getRuntime().availableProcessors()
  def timeCrit(macros: Macros) = CriticalPath.value(macros)
  def timeScheduling() = 10.0
  
  // macro-actor
  def timeTotal(macros: Macros) = macros.map(x => time(x) - overhead(x)).sum
  def time(macro: Macro) = { macro.nodes.map(x => x.cost).sum + overhead(macro) }
  def overhead(macro: Macro) = timeScheduling + getNumberOfEdges(macro) * communicationValue()
  def communicationValue() = 1
  
  def alpha(macros: Macros) = 1 + macros.map(x => overhead(x) / timeTotal(macros)).sum 
  def beta(macros: Macros) = timeCrit(macros) * processors / timeTotal(macros).toDouble
  def fTT(macros: Macros) = Math.max(alpha(macros), beta(macros)) 
  
  
  def getNumberOfEdges(macro: Macro) = {
    val nodes = macro.nodes.map(x => x.node.id)
    val edges = macro.edges.filter(x => x.sNode != Constant.LiteralSourceNode && x.sNode != 0)
    val incoming = edges.filter(x => !nodes.contains(x.sNode) && nodes.contains(x.dNode))
    val outgoing = edges.filter(x => nodes.contains(x.sNode) && !nodes.contains(x.dNode))
    val result = (incoming ++ outgoing).toSet.toList
    result.size
  }
}