package partitioner

import parser._
import utility._
import parser.Type._


object TimeModel {

  var timeSeq: Double = 0
  
  // partitioned macro-actos
  def processors() = Runtime.getRuntime().availableProcessors()
  def timeCrit(macros: Macros) = {
    Hej.convert(macros) //todo
  }
  def timeScheduling() = 0
  
  // macro-actor
  def timeTotal(macros: Macros) = macros.map(x => time(x) + overhead(x)).sum
  def time(macro: Macro) = { macro.nodes.map(x => x.cost).sum }
  def overhead(macro: Macro) = timeScheduling + macro.edges.size * overheadValue()
  def overheadValue() = 5
  
  def alpha(macros: Macros) = 1 + macros.map(x => overhead(x) / timeSeq).sum 
  def beta(macros: Macros) = timeCrit(macros) * processors / timeSeq
  def fTT(macros: Macros) = Math.max(alpha(macros), beta(macros)) 
}