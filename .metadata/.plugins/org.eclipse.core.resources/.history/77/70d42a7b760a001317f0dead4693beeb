package partitioner

import parser._
import parser.Type._

object Algorithms {

  type Destinations = Map[SuperNode, Int]
  type Predecessors = Map[SuperNode, Option[SuperNode]]
  
  def bellman_ford(nodes: SuperNodes, edges: SuperEdges) = {
    var (destination, predecessor) = init(nodes, nodes(0))
    
    for(n <- nodes) {
      for(v <- Hej.findChildren(n, edges)) {
        var (d,p) = relax(v, v, destination, predecessor)
        destination = d
        predecessor = p
      }
    }
    println(destination.values)
    2
  }
  
  private def init(nodes: SuperNodes, source: SuperNode) = {
    var destination = Map[SuperNode, Int]()
    var predecessor = Map[SuperNode, Option[SuperNode]]()
    
    for(n <- nodes) {
      destination += (n -> Int.MaxValue)
      predecessor += (n -> None)
    }
    destination += (source -> -CostAssignment.cost(source))
    (destination, predecessor)
  }
  
  private def relax(node: SuperNode, neighbor: SuperNode, dests: Destinations, preds: Predecessors) = {
    var d = dests
    var p = preds
    
    val edgecost = -CostAssignment.cost(neighbor)
    if(d(neighbor) > d(node) + edgecost) {
      d += (neighbor -> (d(node) + edgecost))
      p += (neighbor -> Some(node))
      (d, p)
    }
    else {
      (d, p)
    }
  }
  
  
}